/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Product as PrismaProduct,
  Order as PrismaOrder,
  Design as PrismaDesign,
  Store as PrismaStore,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ProductServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ProductCountArgs, "select">): Promise<number> {
    return this.prisma.product.count(args);
  }

  async products(args: Prisma.ProductFindManyArgs): Promise<PrismaProduct[]> {
    return this.prisma.product.findMany(args);
  }
  async product(
    args: Prisma.ProductFindUniqueArgs
  ): Promise<PrismaProduct | null> {
    return this.prisma.product.findUnique(args);
  }
  async createProduct(args: Prisma.ProductCreateArgs): Promise<PrismaProduct> {
    return this.prisma.product.create(args);
  }
  async updateProduct(args: Prisma.ProductUpdateArgs): Promise<PrismaProduct> {
    return this.prisma.product.update(args);
  }
  async deleteProduct(args: Prisma.ProductDeleteArgs): Promise<PrismaProduct> {
    return this.prisma.product.delete(args);
  }

  async uploadImageUrl<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaProduct> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "imageUrl";
    const imageUrl = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        imageUrl: imageUrl as InputJsonValue,
      },
    });
  }

  async downloadImageUrl<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<FileDownload> {
    const { imageUrl } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      imageUrl as unknown as LocalStorageFile
    );
  }

  async deleteImageUrl<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<PrismaProduct> {
    const { imageUrl } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      imageUrl as unknown as LocalStorageFile
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        imageUrl: Prisma.DbNull,
      },
    });
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async getDesign(parentId: string): Promise<PrismaDesign | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .design();
  }

  async getStore(parentId: string): Promise<PrismaStore | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .store();
  }
}
