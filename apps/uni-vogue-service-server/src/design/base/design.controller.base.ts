/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileInterceptor } from "@nestjs/platform-express";
import { DesignService } from "../design.service";
import { DesignCreateInput } from "./DesignCreateInput";
import { Design } from "./Design";
import { DesignFindManyArgs } from "./DesignFindManyArgs";
import { DesignWhereUniqueInput } from "./DesignWhereUniqueInput";
import { DesignUpdateInput } from "./DesignUpdateInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";

export class DesignControllerBase {
  constructor(protected readonly service: DesignService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Design })
  async createDesign(@common.Body() data: DesignCreateInput): Promise<Design> {
    return await this.service.createDesign({
      data: data,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,
        imageUrl: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Design] })
  @ApiNestedQuery(DesignFindManyArgs)
  async designs(@common.Req() request: Request): Promise<Design[]> {
    const args = plainToClass(DesignFindManyArgs, request.query);
    return this.service.designs({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,
        imageUrl: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Design })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async design(
    @common.Param() params: DesignWhereUniqueInput
  ): Promise<Design | null> {
    const result = await this.service.design({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,
        imageUrl: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Design })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDesign(
    @common.Param() params: DesignWhereUniqueInput,
    @common.Body() data: DesignUpdateInput
  ): Promise<Design | null> {
    try {
      return await this.service.updateDesign({
        where: params,
        data: data,
        select: {
          createdAt: true,
          createdBy: true,
          description: true,
          id: true,
          imageUrl: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Design })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDesign(
    @common.Param() params: DesignWhereUniqueInput
  ): Promise<Design | null> {
    try {
      return await this.service.deleteDesign({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,
          description: true,
          id: true,
          imageUrl: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/imageUrl")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: Design,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadImageUrl(
    @common.Param()
    params: DesignWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<Design> {
    return this.service.uploadImageUrl(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/imageUrl")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadImageUrl(
    @common.Param()
    params: DesignWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadImageUrl({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/imageUrl")
  @swagger.ApiOkResponse({
    type: Design,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteImageUrl(
    @common.Param()
    params: DesignWhereUniqueInput
  ): Promise<Design> {
    return this.service.deleteImageUrl({
      where: params,
    });
  }

  @common.Get("/:id/products")
  @ApiNestedQuery(ProductFindManyArgs)
  async findProducts(
    @common.Req() request: Request,
    @common.Param() params: DesignWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProducts(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,

        design: {
          select: {
            id: true,
          },
        },

        id: true,
        imageUrl: true,
        price: true,

        store: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/products")
  async connectProducts(
    @common.Param() params: DesignWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        connect: body,
      },
    };
    await this.service.updateDesign({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/products")
  async updateProducts(
    @common.Param() params: DesignWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        set: body,
      },
    };
    await this.service.updateDesign({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/products")
  async disconnectProducts(
    @common.Param() params: DesignWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        disconnect: body,
      },
    };
    await this.service.updateDesign({
      where: params,
      data,
      select: { id: true },
    });
  }
}
