/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { Design } from "./Design";
import { DesignCountArgs } from "./DesignCountArgs";
import { DesignFindManyArgs } from "./DesignFindManyArgs";
import { DesignFindUniqueArgs } from "./DesignFindUniqueArgs";
import { CreateDesignArgs } from "./CreateDesignArgs";
import { UpdateDesignArgs } from "./UpdateDesignArgs";
import { DeleteDesignArgs } from "./DeleteDesignArgs";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { DesignService } from "../design.service";
@graphql.Resolver(() => Design)
export class DesignResolverBase {
  constructor(protected readonly service: DesignService) {}

  async _designsMeta(
    @graphql.Args() args: DesignCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Design])
  async designs(@graphql.Args() args: DesignFindManyArgs): Promise<Design[]> {
    return this.service.designs(args);
  }

  @graphql.Query(() => Design, { nullable: true })
  async design(
    @graphql.Args() args: DesignFindUniqueArgs
  ): Promise<Design | null> {
    const result = await this.service.design(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Design)
  async createDesign(@graphql.Args() args: CreateDesignArgs): Promise<Design> {
    return await this.service.createDesign({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Design)
  async updateDesign(
    @graphql.Args() args: UpdateDesignArgs
  ): Promise<Design | null> {
    try {
      return await this.service.updateDesign({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Design)
  async deleteDesign(
    @graphql.Args() args: DeleteDesignArgs
  ): Promise<Design | null> {
    try {
      return await this.service.deleteDesign(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Design)
  async uploadImageUrl(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: DesignFindUniqueArgs
  ): Promise<Design> {
    return await this.service.uploadImageUrl(args, file);
  }

  @graphql.Mutation(() => Design)
  async deleteImageUrl(
    @graphql.Args()
    args: DesignFindUniqueArgs
  ): Promise<Design> {
    return await this.service.deleteImageUrl(args);
  }

  @graphql.ResolveField(() => [Product], { name: "products" })
  async findProducts(
    @graphql.Parent() parent: Design,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
